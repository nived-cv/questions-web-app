// filterStudentsMinLimit(30,"English")
// filterStudentsMaxLimit(30,"English")
//filterStudentsByLowerLimit(30)
//filterStudentsByUpperLimit(45)
// percentageOfStudentsAbove("English",30)
// percentageOfStudentsBelow("English",30)
//percentageOfStudentsAboveTotal(30)
//percentageOfStudentsBelowTotal(40)
// studentsWithHighPercent()
// studentsWithLowPercent()
// subjectsWithHighestPercent()
// subjectsWithLowestPercent()
//studentsWithHighestPercentIn("Maths")
//studentsWithLowestPercentIn("English")
// console.log(subjectsAveragingAboveClass())
//console.log("subjects averaging below class",subjectsAveragingBelowClass())
//console.log(studentsAboveStudentInEach("104"))
//console.log(studentssBelowStudentInEach("102"))
//console.log(studentssAboveStudentInAll("102"))
//console.log(studentssBelowStudentInAll("104"))
//console.log(studentsAveragingAbove("101"))
//console.log(studentsAveragingBelow("101"))
//console.log(subjectsAveragingAboveStudent("101"))
//console.log(subjectsAveragingBelowStudent("103"))
//console.log(subjectsMaxPercentStudentsAboveStudent("102"))
//console.log(subjectsMaxPercentStudentsBelowStudent("102"))
// console.log(subjectsMinPercentStudentsAboveStudent("102"))
// console.log(subjectsMinPercentStudentsBelowStudent("103"))
// console.log(percentOfStudentsScoringAboveAvgInTotal())
// console.log(percentOfStudentsScoringBelowAvgInTotal())
//console.log(percentOfStudentsScoringAboveAvgInEach())
//console.log(percentOfStudentsScoringBelowAvgInEach())
// console.log(studentsScoringAboveClassAvgInAll())
//console.log(studentsScoringBelowClassAvgInAll())
// console.log(subjectsAveragingAboveInMost())
// console.log(subjectsAveragingBelowInMost())
// console.log(percentageOfStudentsAveragingAboveStudentInMost("101"))
//console.log(percentageOfStudentsAveragingBelowStudentInMost("102"))
//console.log(subjectWithHighestpercentAboveStudentAverage("102"))
//console.log(subjectWithHighestpercentBelowStudentAverage("104"))


const subjectsAveragingAboveClass = () =>{

    const classAvg = averageofClass() / students[0].marks.length
    const subs = fetchSubs()
    let result = []
    
    for(key in subs){
        percent = percentageOfStudentsAbove(key,classAvg)
        percent > 50 ? result.push(key) : ''
    }
    return result   
}

const subjectsAveragingBelowClass = () =>{

    const classAvg = averageofClass() / students[0].marks.length
    const subs = fetchSubs()
    let result = []
    
    for(key in subs){
        percent = percentageOfStudentsBelow(key,classAvg)
        percent > 50 ? result.push(key) : ''
    }
    return(result ? result : "no result")
}

const studentsAboveStudentInAll = (id) => {

    avg = averageMarkOfOne(id)
    result = {}
    result["percent"] = percentageOfStudentsAboveTotal(avg)
    
    return(result ? result : "no students")
}

const studentsBelowStudentInAll = (id) => {

    avg = averageMarkOfOne(id)
    result = {}
    result["percent"] = percentageOfStudentsBelowTotal(avg)

    return(result ? result : "no students")
}


const studentsAboveStudentInEach = (id) => {

    const subs = fetchSubs()
    avg = averageMarkOfOne(id)
    result = {}

    for(key in subs)
        result[key] = percentageOfStudentsAbove(key,avg)
    
    return(result ? result : "no students")
}

const studentssBelowStudentInEach = (id) => {

    const subs = fetchSubs()
    avg = averageMarkOfOne(id)
    result = {}

    for(key in subs)
        result[key] = percentageOfStudentsBelow(key,avg)
    
    return(result ? result : "no students")
}

const studentsAveragingAbove = (id) =>{

    let result = []
    avg = averageMarkOfOne(id)
    result = filterStudentsByMinScore(avg)
    result = result.map((item) => item.name)

    return(result.length > 0 ? result : "no students")
}

const studentsAveragingBelow = (id) =>{

    let result = []
    avg = averageMarkOfOne(id)
    result = filterStudentsByMaxScore(avg)
    result = result.map((item) => item.name)

    return(result.length > 0 ? result : "no students")
}

const subjectsAveragingAboveStudent = (id) => {

    let result = []
    avg = averageMarkOfOne(id)
    subjectList = averageOfEachSub()

    for(sub in subjectList)
    subjectList[sub] > avg && result.push(sub)

    return (result.length > 0 ? result : "no result")
}

const subjectsAveragingBelowStudent = (id) => {

    let result = []
    avg = averageMarkOfOne(id)
    subjectList = averageOfEachSub()

    for(sub in subjectList)
    subjectList[sub] < avg && result.push(sub)

    return (result.length > 0 ? result : "no result")
}

const subjectsMaxPercentStudentsAboveStudent = (id) =>{

    let result = []
    let percentList = fetchSubs()
    avg = averageMarkOfOne(id)
    
    for(key in percentList)
    percentList[key] = percentageOfStudentsAbove(key,avg)

    percentValues = Object.values(percentList)
    subjects = Object.keys(percentList)
    max_value = Math.max(...percentValues)

    for(let i =0; i < subjects.length ; i++)
    max_value == percentValues[i] && result.push(subjects[i])

    return result
}

const subjectsMaxPercentStudentsBelowStudent = (id) =>{

    let result = []
    let percentList = fetchSubs()
    avg = averageMarkOfOne(id)
    
    for(key in percentList)
    percentList[key] = percentageOfStudentsBelow(key,avg)

    percentValues = Object.values(percentList)
    subjects = Object.keys(percentList)
    max_value = Math.max(...percentValues)

    for(let i =0; i < subjects.length ; i++)
    max_value == percentValues[i] && result.push(subjects[i])

    return result
}

const subjectsMinPercentStudentsAboveStudent = (id) =>{

    let result = []
    let percentList = fetchSubs()
    avg = averageMarkOfOne(id)
    
    for(key in percentList)
    percentList[key] = percentageOfStudentsAbove(key,avg)

    percentValues = Object.values(percentList)
    subjects = Object.keys(percentList)
    min_value = Math.min(...percentValues)

    for(let i =0; i < subjects.length ; i++)
    min_value == percentValues[i] && result.push(subjects[i])

    return result
}

const subjectsMinPercentStudentsBelowStudent = (id) =>{

    let result = []
    let percentList = fetchSubs()
    avg = averageMarkOfOne(id)
    
    for(key in percentList)
    percentList[key] = percentageOfStudentsBelow(key,avg)

    percentValues = Object.values(percentList)
    subjects = Object.keys(percentList)
    min_value = Math.min(...percentValues)

    for(let i =0; i < subjects.length ; i++)
    min_value == percentValues[i] && result.push(subjects[i])

    return result
}

const percentOfStudentsScoringAboveAvgInTotal = () => {

    let avg = averageofClass() / students[0].marks.length
    result = percentageOfStudentsAboveTotal(avg)

    return result
}

const percentOfStudentsScoringBelowAvgInTotal = () => {

    let avg = averageofClass() / students[0].marks.length
    result = percentageOfStudentsBelowTotal(avg)

    return result
}

const percentOfStudentsScoringAboveAvgInEach = () => {

    let subjectList = fetchSubs()
    let avg = averageofClass() / students[0].marks.length

    for(key in subjectList)
    subjectList[key] = percentageOfStudentsAbove(key,avg)

    return subjectList
}

const percentOfStudentsScoringBelowAvgInEach = () => {

    let subjectList = fetchSubs()
    let avg = averageofClass() / students[0].marks.length

    for(key in subjectList)
    subjectList[key] = percentageOfStudentsBelow(key,avg)

    return (subjectList ? subjectList : "no result")
}

const studentsScoringAboveClassAvgInAll = () =>{

    avg = averageofClass() / students[0].marks.length
    result = filterStudentsByMinScore(avg)
    result = result.map(student => student.name)

    return (result.length > 0 ? result : "no result")
}

const studentsScoringBelowClassAvgInAll = () =>{

    avg = averageofClass() / students[0].marks.length
    result = filterStudentsByMaxScore(avg)
    result = result.map(student => student.name)

    return (result.length > 0 ? result : "no result")
}

// students scoring above the average class in most subject already done
// students scoring below the average class in most subject already done

const subjectsAveragingAboveInMost = () =>{

    avg = averageofClass() / students[0].marks.length
    subjectList = fetchSubs()
    result = []

    for(key in subjectList)
        subjectList[key] = percentageOfStudentsAbove(key,avg)

        console.log(subjectList)
    
    for(key in subjectList)
        subjectList[key] > 50 && result.push(key)
    
    return (result.length > 0 ? result : "no result")
}

const subjectsAveragingBelowInMost = () =>{

    avg = averageofClass() / students[0].marks.length
    subjectList = fetchSubs()
    result = []

    for(key in subjectList)
        subjectList[key] = percentageOfStudentsBelow(key,avg)

    
    for(key in subjectList)
        subjectList[key] > 50 && result.push(key)
    
    return (result.length > 0 ? result : "no result")
}


const percentageOfStudentsAveragingAboveStudentInMost = (id) =>{

    let result = []
    avg = averageMarkOfOne(id)
    majority_factor = students[0].marks.length / 2

    students.forEach((student) => {

        res_array = student.marks.filter(detail => detail.mark > avg)
        res_array.length > majority_factor &&  result.push(student.name)
    })
    return (result ? result : "no result")
}

const percentageOfStudentsAveragingBelowStudentInMost = (id) =>{

    let result = []
    avg = averageMarkOfOne(id)
    majority_factor = students[0].marks.length / 2

    students.forEach((student) => {

        res_array = student.marks.filter(detail => detail.mark < avg)
        res_array.length > majority_factor &&  result.push(student.name)
    })
    return (result ? result : "no result")
}

// 97 & 98 is same question as above and has already been done

const subjectWithHighestpercentAboveStudentAverage = (id) =>{

    avg = averageMarkOfOne(id)
    markList = fetchSubs()
    result = []
    
    for(key in markList)
    markList[key] = percentageOfStudentsAbove(key,avg)

    max_value = Math.max(...Object.values(markList))
    for(key in markList)
    markList[key] == max_value && result.push(key)

    return result
}

const subjectWithHighestpercentBelowStudentAverage = (id) =>{

    avg = averageMarkOfOne(id)
    markList = fetchSubs()
    result = []
    
    for(key in markList)
    markList[key] = percentageOfStudentsBelow(key,avg)

    max_value = Math.max(...Object.values(markList))
    for(key in markList)
    markList[key] == max_value && result.push(key)

    return result
}